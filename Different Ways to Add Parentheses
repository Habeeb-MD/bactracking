class Solution {
public:
    void operation(vector<int>&ans,vector<int> x,vector<int> y,string op){
            for(auto i:x)
                for(auto j:y){
                    if(op=="+")                   
                        ans.push_back(i+j);                    
                    if(op=="-")                   
                        ans.push_back(i-j);            
                    if(op=="*")                   
                        ans.push_back(i*j);            
                }
    }
    map<pair<int,int>,vector<int>>m;
    vector<int> solve(vector<string>& s,int i,int j){
        vector<int>ans;
        int n=s.size();
        if(m.find({i,j})!=m.end())
            return m[{i,j}];
        if(i==j)
            return m[{i,j}]={stoi(s[i])};
        for(int k=i;k+2<=j;k+=2){
            auto x= solve(s,i,k);
            auto y= solve(s,k+2,j);
            operation(ans,x,y,s[k+1]);
        }
        return m[{i,j}]=ans;
    }
    vector<int> diffWaysToCompute(string input) {
        vector<string> s;
        for(int i=0;i<input.size();i++){
            string t;
            if(isdigit(input[i])){
                int j=i;                
                while(j<input.size() and isdigit(input[j]))t+=input[j],j++;
                i=j-1;
            }
            else 
                t+=input[i];                
            s.push_back(t);
        }
        return solve(s,0,s.size()-1);
    }
};
